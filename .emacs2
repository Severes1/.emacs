(load-file "~/emacs-config/git.el")
(require 'git)

(define-key git-status-mode-map (kbd "TAB") 'git-diff-file)

(load-file "~/emacs-config/git-blame.el")
(require 'git-blame)

(load-file "~/emacs-config/yaml-mode.el")
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))

(add-to-list 'load-path "/opt/ros/kinetic/share/emacs/site-lisp")
(require 'rosemacs-config)

(load-file "~/emacs-config/dired-hacks-utils.el")
(load-file "~/emacs-config/dired-subtree.el")

(setq dired-subtree-use-backgrounds nil)
(setq dired-subtree-line-prefix "     ")

(define-key dired-mode-map "i" 'ido-find-file)
;; (define-key dired-mode-map "j" 'dired-next-line)
;; (define-key dired-mode-map "k" 'dired-previous-line)
;(define-key dired-mode-map "F" 'find-name-dired)

(require 'dired)

(defun my-dired-subtree-toggle ()
  "dired-subtree if folder. view file if file"
  (interactive)
  (condition-case-unless-debug nil
      (dired-subtree-toggle)
    (error (dired-display-file))))
  
(defun my-dired-find-file-other-window-help ()
  (interactive)
  (dired-subtree-toggle)
  (dired-subtree-toggle)
  (dired-find-file))


(defun my-dired-find-file-other-window ()
  "open file in other window unless it's a folder, in which case navigate"
  (interactive)
  (condition-case-unless-debug nil
      (my-dired-find-file-other-window-help)
    (error (dired-find-file-other-window))))

(define-key dired-mode-map "a" 'dired-jump)
(define-key dired-mode-map (kbd "TAB") 'my-dired-subtree-toggle)
;(define-key dired-mode-map (kbd "RET") 'my-dired-find-file-other-window)

(defun my-dired-mode-setup ()
  "show less information in dired buffers"
  (interactive)
  (dired-hide-details-mode 1)
  (linum-mode 0))
(add-hook 'dired-mode-hook 'my-dired-mode-setup)


(require 'ls-lisp)
(setq ls-lisp-use-insert-directory-program nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ls-lisp-dirs-first t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(load-file "~/emacs-config/workgroups.el")
(require 'workgroups)
(setq wg-prefix-key (kbd "C-c w"))

(workgroups-mode 1)
(wg-load "~/emacs-config/wg1")

(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

(add-hook 'ansi-term-mode-hook (lambda () (linum-mode 0)))
(defun my-term-use-utf8 ()
  (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(add-hook 'term-exec-hook 'my-term-use-utf8)

(defun my-term-paste (&amp;optional string)
		      (interactive)
		      (process-send-string
		       (get-buffer-process (current-buffer))
		       (if string string (current-kill 0)))))

(defun my-term-hook ()
  (interactive)
  (goto-address-mode)
  (define-key term-raw-map "\C-y" 'my-term-paste)
  (linum-mode 0))
  
(add-hook 'term-mode-hook 'my-term-hook)

(dired ".")
(other-window -1)
(ansi-term "/bin/bash")
(other-window -1)

;; (require 'windmove)

;; (defun buf-move-right ()
;;   "Swap the current buffer and the buffer on the right of the split.
;; If there is no split, ie now window on the right of the current
;; one, an error is signaled."
;;   (interactive)
;;   (let* ((other-win (windmove-find-other-window 'right))
;; 	 (buf-this-buf (window-buffer (selected-window))))
;;     (if (null other-win)
;; 	(error "No right split")
;;       ;; swap top with this one
;;       (set-window-buffer (selected-window) (window-buffer other-win))
;;       ;; move this one to top
;;       (set-window-buffer other-win buf-this-buf)
;;       (select-window other-win))))

;; (global-set-key (kbd "C-x x")  'buf-move-right)

(setq dired-dwim-target t) ;; Allows copying between multiple dired windows

(setq split-width-threshold 10000)
(setq split-height-threshold 10000)

(global-set-key "\C-x\C-b" 'buffer-menu)
(global-set-key (kbd "C-x x") 'ansi-term)

(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window -1)))
(global-set-key (kbd "C-x n") (lambda () (interactive) (other-window 1)))
(global-set-key (kbd "C-x p") (lambda () (interactive) (other-window -1)))

;;(global-set-key (kbd "M-p") (lambda () (interactive) (other-window -1)))
;;(global-set-key (kbd "M-n") (lambda () (interactive) (other-window 1)))
